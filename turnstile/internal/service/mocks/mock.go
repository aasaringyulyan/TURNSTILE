// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"
	models "turnstile/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockEmployeeRepo is a mock of EmployeeRepo interface.
type MockEmployeeRepo struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeeRepoMockRecorder
}

// MockEmployeeRepoMockRecorder is the mock recorder for MockEmployeeRepo.
type MockEmployeeRepoMockRecorder struct {
	mock *MockEmployeeRepo
}

// NewMockEmployeeRepo creates a new mock instance.
func NewMockEmployeeRepo(ctrl *gomock.Controller) *MockEmployeeRepo {
	mock := &MockEmployeeRepo{ctrl: ctrl}
	mock.recorder = &MockEmployeeRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeeRepo) EXPECT() *MockEmployeeRepoMockRecorder {
	return m.recorder
}

// GetEmployeeByCard mocks base method.
func (m *MockEmployeeRepo) GetEmployeeByCard(card uint64) (models.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeeByCard", card)
	ret0, _ := ret[0].(models.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeeByCard indicates an expected call of GetEmployeeByCard.
func (mr *MockEmployeeRepoMockRecorder) GetEmployeeByCard(card interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeByCard", reflect.TypeOf((*MockEmployeeRepo)(nil).GetEmployeeByCard), card)
}

// Save mocks base method.
func (m *MockEmployeeRepo) Save(data models.Employee) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockEmployeeRepoMockRecorder) Save(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockEmployeeRepo)(nil).Save), data)
}

// MockLogsRepo is a mock of LogsRepo interface.
type MockLogsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockLogsRepoMockRecorder
}

// MockLogsRepoMockRecorder is the mock recorder for MockLogsRepo.
type MockLogsRepoMockRecorder struct {
	mock *MockLogsRepo
}

// NewMockLogsRepo creates a new mock instance.
func NewMockLogsRepo(ctrl *gomock.Controller) *MockLogsRepo {
	mock := &MockLogsRepo{ctrl: ctrl}
	mock.recorder = &MockLogsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogsRepo) EXPECT() *MockLogsRepoMockRecorder {
	return m.recorder
}

// DeleteAll mocks base method.
func (m *MockLogsRepo) DeleteAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockLogsRepoMockRecorder) DeleteAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockLogsRepo)(nil).DeleteAll))
}

// GetAll mocks base method.
func (m *MockLogsRepo) GetAll() (models.PassageLogsForApi, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].(models.PassageLogsForApi)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockLogsRepoMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockLogsRepo)(nil).GetAll))
}

// Save mocks base method.
func (m *MockLogsRepo) Save(log models.PassageLogForApi) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", log)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockLogsRepoMockRecorder) Save(log interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockLogsRepo)(nil).Save), log)
}

// MockDataGripper is a mock of DataGripper interface.
type MockDataGripper struct {
	ctrl     *gomock.Controller
	recorder *MockDataGripperMockRecorder
}

// MockDataGripperMockRecorder is the mock recorder for MockDataGripper.
type MockDataGripperMockRecorder struct {
	mock *MockDataGripper
}

// NewMockDataGripper creates a new mock instance.
func NewMockDataGripper(ctrl *gomock.Controller) *MockDataGripper {
	mock := &MockDataGripper{ctrl: ctrl}
	mock.recorder = &MockDataGripperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataGripper) EXPECT() *MockDataGripperMockRecorder {
	return m.recorder
}

// LoadData mocks base method.
func (m *MockDataGripper) LoadData() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadData")
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadData indicates an expected call of LoadData.
func (mr *MockDataGripperMockRecorder) LoadData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadData", reflect.TypeOf((*MockDataGripper)(nil).LoadData))
}

// MockLogSender is a mock of LogSender interface.
type MockLogSender struct {
	ctrl     *gomock.Controller
	recorder *MockLogSenderMockRecorder
}

// MockLogSenderMockRecorder is the mock recorder for MockLogSender.
type MockLogSenderMockRecorder struct {
	mock *MockLogSender
}

// NewMockLogSender creates a new mock instance.
func NewMockLogSender(ctrl *gomock.Controller) *MockLogSender {
	mock := &MockLogSender{ctrl: ctrl}
	mock.recorder = &MockLogSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogSender) EXPECT() *MockLogSenderMockRecorder {
	return m.recorder
}

// SendLogs mocks base method.
func (m *MockLogSender) SendLogs() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendLogs")
	ret0, _ := ret[0].(error)
	return ret0
}

// SendLogs indicates an expected call of SendLogs.
func (mr *MockLogSenderMockRecorder) SendLogs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendLogs", reflect.TypeOf((*MockLogSender)(nil).SendLogs))
}

// MockScheduler is a mock of Scheduler interface.
type MockScheduler struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerMockRecorder
}

// MockSchedulerMockRecorder is the mock recorder for MockScheduler.
type MockSchedulerMockRecorder struct {
	mock *MockScheduler
}

// NewMockScheduler creates a new mock instance.
func NewMockScheduler(ctrl *gomock.Controller) *MockScheduler {
	mock := &MockScheduler{ctrl: ctrl}
	mock.recorder = &MockSchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScheduler) EXPECT() *MockSchedulerMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockScheduler) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockSchedulerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockScheduler)(nil).Start))
}

// UnscheduledSendLogs mocks base method.
func (m *MockScheduler) UnscheduledSendLogs() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnscheduledSendLogs")
}

// UnscheduledSendLogs indicates an expected call of UnscheduledSendLogs.
func (mr *MockSchedulerMockRecorder) UnscheduledSendLogs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnscheduledSendLogs", reflect.TypeOf((*MockScheduler)(nil).UnscheduledSendLogs))
}

// UnscheduledUpdate mocks base method.
func (m *MockScheduler) UnscheduledUpdate() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnscheduledUpdate")
}

// UnscheduledUpdate indicates an expected call of UnscheduledUpdate.
func (mr *MockSchedulerMockRecorder) UnscheduledUpdate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnscheduledUpdate", reflect.TypeOf((*MockScheduler)(nil).UnscheduledUpdate))
}

// MockTurnstile is a mock of Turnstile interface.
type MockTurnstile struct {
	ctrl     *gomock.Controller
	recorder *MockTurnstileMockRecorder
}

// MockTurnstileMockRecorder is the mock recorder for MockTurnstile.
type MockTurnstileMockRecorder struct {
	mock *MockTurnstile
}

// NewMockTurnstile creates a new mock instance.
func NewMockTurnstile(ctrl *gomock.Controller) *MockTurnstile {
	mock := &MockTurnstile{ctrl: ctrl}
	mock.recorder = &MockTurnstileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTurnstile) EXPECT() *MockTurnstileMockRecorder {
	return m.recorder
}

// CheckHandler mocks base method.
func (m *MockTurnstile) CheckHandler(check models.PassageCheck) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckHandler", check)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckHandler indicates an expected call of CheckHandler.
func (mr *MockTurnstileMockRecorder) CheckHandler(check interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckHandler", reflect.TypeOf((*MockTurnstile)(nil).CheckHandler), check)
}

// LogHandler mocks base method.
func (m *MockTurnstile) LogHandler(logs models.PassageLogsLinux) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogHandler", logs)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogHandler indicates an expected call of LogHandler.
func (mr *MockTurnstileMockRecorder) LogHandler(logs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogHandler", reflect.TypeOf((*MockTurnstile)(nil).LogHandler), logs)
}
